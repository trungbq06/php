package quangnd.com.business;

import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import quangnd.com.dao.TopicDAO;
import quangnd.com.entity.Property;
import quangnd.com.entity.QuestionEntity;
import quangnd.com.entity.TopicEntity;

/**
 * @author QUANGND
 */
public class ManageTopicListFrame extends javax.swing.JFrame {

    private final TopicDAO topicDAO;
    private TopicEntity currentTopicEntity;

    public ManageTopicListFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        topicDAO = new TopicDAO();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        nameTopic = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbbLevel = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTopic = new javax.swing.JList();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JListQuestion = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taQuestion = new javax.swing.JTextArea();
        tfA = new javax.swing.JTextField();
        tfB = new javax.swing.JTextField();
        tfC = new javax.swing.JTextField();
        tfD = new javax.swing.JTextField();
        cboxA = new javax.swing.JRadioButton();
        cboxB = new javax.swing.JRadioButton();
        cboxC = new javax.swing.JRadioButton();
        cboxD = new javax.swing.JRadioButton();
        btnAdd1 = new javax.swing.JButton();
        btnUpdate1 = new javax.swing.JButton();
        btnDelete1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản Lý Câu Hỏi");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Tên Đề");

        jLabel2.setText("Mức Độ");

        cbbLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N1", "N2", "N3", "N4", "N5" }));
        cbbLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbLevelActionPerformed(evt);
            }
        });

        jListTopic.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListTopicValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListTopic);

        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Cập Nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Question Infomation"));

        JListQuestion.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                JListQuestionValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(JListQuestion);

        jLabel3.setText("Question");

        taQuestion.setColumns(20);
        taQuestion.setLineWrap(true);
        taQuestion.setRows(5);
        jScrollPane3.setViewportView(taQuestion);

        buttonGroup1.add(cboxA);
        cboxA.setSelected(true);
        cboxA.setText("A");

        buttonGroup1.add(cboxB);
        cboxB.setText("B");

        buttonGroup1.add(cboxC);
        cboxC.setText("C");

        buttonGroup1.add(cboxD);
        cboxD.setText("D");

        btnAdd1.setText("Thêm");
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1ActionPerformed(evt);
            }
        });

        btnUpdate1.setText("Cập Nhật");
        btnUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate1ActionPerformed(evt);
            }
        });

        btnDelete1.setText("Xóa");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboxD)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cboxA)
                    .addComponent(cboxB)
                    .addComponent(cboxC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(tfA)
                    .addComponent(tfB)
                    .addComponent(tfC)
                    .addComponent(tfD)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd1, btnDelete1, btnUpdate1});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxA, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxD))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd1)
                            .addComponent(btnUpdate1)
                            .addComponent(btnDelete1))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel4.setText("Click đây để Upload dữ liệu mới");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameTopic, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(306, 306, 306)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete)))
                        .addGap(223, 223, 223))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnDelete, btnUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbbLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbLevelActionPerformed
        int level = cbbLevel.getSelectedIndex() + 1;

        loadTopicList(level);
    }//GEN-LAST:event_cbbLevelActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            String name = nameTopic.getText();
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Tên");
                return;
            }

            int level = cbbLevel.getSelectedIndex() + 1;
            String id = UUID.randomUUID().toString().replaceAll("-", "");

            TopicEntity topicEntity = new TopicEntity(id, name, level, new ArrayList<QuestionEntity>());

            topicDAO.add(topicEntity);

            loadTopicList(level);

            jListTopic.setSelectedIndex(topicDAO.getAll().size() - 1);
        } catch (IOException ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            topicDAO.readFromFile();

            int level = cbbLevel.getSelectedIndex() + 1;
            loadTopicList(level);

        } catch (Exception ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void loadTopicList(int level) {
        List<TopicEntity> topicEntitys = topicDAO.getByLevel(level);
        DefaultListModel defaultListModel = new DefaultListModel();
        for (int i = 0; i < topicEntitys.size(); i++) {
            TopicEntity topicEntity = topicEntitys.get(i);
            defaultListModel.addElement(topicEntity);
        }

        jListTopic.setModel(defaultListModel);
    }

    private void loadQuestionList() {
        List<QuestionEntity> questionList = currentTopicEntity.getQuestionList();
        DefaultListModel defaultListModel = new DefaultListModel();
        for (int i = 0; i < questionList.size(); i++) {
            QuestionEntity questionEntity = questionList.get(i);
            defaultListModel.addElement(new Property("Câu " + (i + 1), questionEntity));
        }

        JListQuestion.setModel(defaultListModel);
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            TopicEntity topicEntity = (TopicEntity) jListTopic.getSelectedValue();
            if (topicEntity == null) {
                return;
            }

            String name = nameTopic.getText();
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Tên");
                return;
            }

            int level = cbbLevel.getSelectedIndex() + 1;

            topicEntity.setName(name);
            topicEntity.setLevel(level);

            topicDAO.update(topicEntity);

            int selectedIndex = jListTopic.getSelectedIndex();

            loadTopicList(level);

            jListTopic.setSelectedIndex(selectedIndex);
        } catch (IOException ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            TopicEntity topicEntity = (TopicEntity) jListTopic.getSelectedValue();
            if (topicEntity == null) {
                return;
            }

            topicDAO.delete(topicEntity.getId());
            int level = cbbLevel.getSelectedIndex() + 1;

            loadTopicList(level);
        } catch (IOException ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jListTopicValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListTopicValueChanged
        TopicEntity topicEntity = (TopicEntity) jListTopic.getSelectedValue();
        if (topicEntity == null) {
            return;
        }

        currentTopicEntity = topicEntity;
        nameTopic.setText(topicEntity.getName());

        loadQuestionList();
    }//GEN-LAST:event_jListTopicValueChanged

    private void btnAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1ActionPerformed
        try {
            TopicEntity topicEntity = (TopicEntity) jListTopic.getSelectedValue();
            if (topicEntity == null) {
                return;
            }

            String question = taQuestion.getText();
            String answerA = tfA.getText();
            String answerB = tfB.getText();
            String answerC = tfC.getText();
            String answerD = tfD.getText();

            if (question.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Câu Hỏi");
                return;
            }

            if (question.length() > 387) {
                JOptionPane.showMessageDialog(this, "Câu Hỏi Quá Dài");
                return;
            }

            if (answerA.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án A");
                return;
            }

            if (answerA.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án A Quá Dài");
                return;
            }

            if (answerB.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án B");
                return;
            }

            if (answerB.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án B Quá Dài");
                return;
            }

            if (answerC.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án C");
                return;
            }

            if (answerC.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án C Quá Dài");
                return;
            }

            if (answerD.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án D");
                return;
            }

            if (answerD.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án D Quá Dài");
                return;
            }

            String correctAnswer = null;
            for (Enumeration<AbstractButton> buttons = buttonGroup1.getElements(); buttons.hasMoreElements();) {
                AbstractButton button = buttons.nextElement();

                if (button.isSelected()) {
                    correctAnswer = button.getText();
                    System.out.println(correctAnswer);
                    break;
                }
            }

            String id = UUID.randomUUID().toString().replaceAll("-", "");
            currentTopicEntity.getQuestionList().add(new QuestionEntity(id, question, answerA, answerB, answerC, answerD, correctAnswer));

            topicDAO.update(currentTopicEntity);

            loadQuestionList();

            JListQuestion.setSelectedIndex(currentTopicEntity.getQuestionList().size() - 1);
        } catch (IOException ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAdd1ActionPerformed

    private void JListQuestionValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_JListQuestionValueChanged
        Property selectProperty = (Property) JListQuestion.getSelectedValue();
        if (selectProperty == null) {
            return;
        }

        QuestionEntity questionEntity = (QuestionEntity) selectProperty.getObject();
        taQuestion.setText(questionEntity.getQuestion());
        tfA.setText(questionEntity.getAnswerA());
        tfB.setText(questionEntity.getAnswerB());
        tfC.setText(questionEntity.getAnswerC());
        tfD.setText(questionEntity.getAnswerD());

        for (Enumeration<AbstractButton> buttons = buttonGroup1.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (questionEntity.getCorrectAnswer().equals(button.getText())) {
                button.setSelected(true);
                break;
            }

        }

    }//GEN-LAST:event_JListQuestionValueChanged

    private void btnUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate1ActionPerformed
        try {
            Property selectProperty = (Property) JListQuestion.getSelectedValue();
            if (selectProperty == null) {
                return;
            }

            QuestionEntity questionEntity = (QuestionEntity) selectProperty.getObject();

            String question = taQuestion.getText();
            String answerA = tfA.getText();
            String answerB = tfB.getText();
            String answerC = tfC.getText();
            String answerD = tfD.getText();

            if (question.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Câu Hỏi");
                return;
            }

            if (question.length() > 387) {
                JOptionPane.showMessageDialog(this, "Câu Hỏi Quá Dài");
                return;
            }

            if (answerA.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án A");
                return;
            }

            if (answerA.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án A Quá Dài");
                return;
            }

            if (answerB.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án B");
                return;
            }

            if (answerB.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án B Quá Dài");
                return;
            }

            if (answerC.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án C");
                return;
            }

            if (answerC.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án C Quá Dài");
                return;
            }

            if (answerD.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mời Nhập Đáp Án D");
                return;
            }

            if (answerD.length() > 85) {
                JOptionPane.showMessageDialog(this, "Đáp Án D Quá Dài");
                return;
            }

            String correctAnswer = null;
            for (Enumeration<AbstractButton> buttons = buttonGroup1.getElements(); buttons.hasMoreElements();) {
                AbstractButton button = buttons.nextElement();

                if (button.isSelected()) {
                    correctAnswer = button.getText();
                    System.out.println(correctAnswer);
                    break;
                }
            }

            List<QuestionEntity> questionList = currentTopicEntity.getQuestionList();
            for (int i = 0; i < questionList.size(); i++) {
                QuestionEntity questionEntityTmp = questionList.get(i);
                if (questionEntity.getId().equals(questionEntityTmp.getId())) {
                    questionEntityTmp.setQuestion(question);
                    questionEntityTmp.setAnswerA(answerA);
                    questionEntityTmp.setAnswerB(answerB);
                    questionEntityTmp.setAnswerC(answerC);
                    questionEntityTmp.setAnswerD(answerD);
                    questionEntityTmp.setCorrectAnswer(correctAnswer);
                }
            }

            topicDAO.update(currentTopicEntity);

            int selectedIndex = JListQuestion.getSelectedIndex();

            loadQuestionList();

            JListQuestion.setSelectedIndex(selectedIndex);
        } catch (IOException ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdate1ActionPerformed

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        try {
            Property selectProperty = (Property) JListQuestion.getSelectedValue();
            if (selectProperty == null) {
                return;
            }

            QuestionEntity questionEntity = (QuestionEntity) selectProperty.getObject();

            List<QuestionEntity> questionList = currentTopicEntity.getQuestionList();
            for (int i = 0; i < questionList.size(); i++) {
                QuestionEntity questionEntityTmp = questionList.get(i);
                if (questionEntity.getId().equals(questionEntityTmp.getId())) {
                    questionList.remove(i);
                    break;
                }
            }

            topicDAO.update(currentTopicEntity);

            loadQuestionList();

            if (questionList.size() > 0) {
                JListQuestion.setSelectedIndex(0);
            }

        } catch (IOException ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        try {
            openWebpage(new URI("http://thuthach.hoctiengnhat24honline.com/UploadFile/"));
        } catch (URISyntaxException ex) {
            Logger.getLogger(ManageTopicListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    public static void openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList JListQuestion;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdate1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbbLevel;
    private javax.swing.JRadioButton cboxA;
    private javax.swing.JRadioButton cboxB;
    private javax.swing.JRadioButton cboxC;
    private javax.swing.JRadioButton cboxD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jListTopic;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField nameTopic;
    private javax.swing.JTextArea taQuestion;
    private javax.swing.JTextField tfA;
    private javax.swing.JTextField tfB;
    private javax.swing.JTextField tfC;
    private javax.swing.JTextField tfD;
    // End of variables declaration//GEN-END:variables
}
